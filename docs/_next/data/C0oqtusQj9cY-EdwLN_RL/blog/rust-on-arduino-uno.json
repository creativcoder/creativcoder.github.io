{"pageProps":{"post":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.unsplash.com/photo-1667621590386-bab21d430992?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1331&q=80\",\n        alt: \"cover image\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At the time of writing this, about a month ago, the rust-avr fork was merged \", _jsx(_components.a, {\n        href: \"https://github.com/rust-lang/rust/issues/44052#issuecomment-663394401\",\n        children: \"upstream\"\n      }), \". This means that you can now compile Rust programs for the avr microcontroller board by just running \", _jsx(_components.code, {\n        children: \"cargo +nightly build\"\n      }), \", providing a \", _jsx(_components.code, {\n        children: \".cargo/config.toml\"\n      }), \" for your target (\", _jsx(_components.code, {\n        children: \"avr-unknown-unknown\"\n      }), \"). That's huge!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I have always been fascinated with the idea of using code to manipulate and affect physical objects. This is probably going to be a series of blog posts on my adventures with Rust on Arduino and maybe ESP8266 and discovery F3 in future. (I have these lying around too). Kicking off the series with this first post.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.em, {\n        children: \"Target audience\"\n      }), \": This post is written with beginner to intermediate folks in mind who want a head start with embedded systems in Rust with Arduino. Once you have gone through this post, you may wanna go through the through the basics on \", _jsx(_components.a, {\n        href: \"https://rust-embedded.github.io/book/intro/index.html\",\n        children: \"embedded rust book\"\n      }), \". The code in the post is compiled on a Linux machine (Arch linux) with Rust compiler version: \", _jsx(_components.code, {\n        children: \"rustc 1.47.0-nightly (22ee68dc5 2020-08-05)\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We'll take a whirlwind tour on how to run Rust on the Arduino Uno, which is probably the most widely known and used development board in the hobbyist embedded domain. The \", _jsx(_components.a, {\n        href: \"https://store.arduino.cc/usa/arduino-uno-rev3\",\n        children: \"Arduino Uno\"\n      }), \" is based on the ATmega328P, which is an 8 bit microcontroller falling under the family AVR. AVR is a family of micro-controllers developed since 1996 by Atmel, which was later acquired by Microchip technology. If you wanna read more about that, head over here: \", _jsx(_components.a, {\n        href: \"https://book.avr-rust.com/001-introduction.html\",\n        children: \"AVR-Rust book\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With that brief history aside, let's get into it!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll do the hello world of arduino which is blinking its built-in LED. It's a very simple exercise, but there's a lot to learn as a beginner.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"setting-up-our-project\",\n      children: _jsx(_components.a, {\n        href: \"#setting-up-our-project\",\n        children: \"Setting up our project\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, we'll create a new cargo project by running:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"cargo new rust-arduino-blink\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We'll need to cross compile our project for the avr target (target triple:\", _jsx(_components.code, {\n        children: \"avr-unknown-unknown\"\n      }), \").\\nFor this we'll need to switch to the nightly toolchain as some of the dependent crates use unstable features to make all of this happen. So we'll run:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"rustup override \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"set\"\n        }), \" nightly\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The above command overrides the toolchain of choice for only our current directory to be nightly.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then we'll install the required packages:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"pacman -S avr-gcc\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"avr-gcc\"\n      }), \" package is required to use the linker.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"pacman -S arduino-avr-core\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"arduino-avr-core\"\n      }), \" package contains utilities such as \", _jsx(_components.a, {\n        href: \"https://www.nongnu.org/avrdude/\",\n        children: \"avrdude\"\n      }), \" which is a tool to upload and manipulate ROM and EEPROM contents of microcontrollers using the in-system programming technique.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I am on an arch linux distro (endeavour OS) where \", _jsx(_components.code, {\n        children: \"pacman\"\n      }), \" is our package manager.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, under \", _jsx(_components.code, {\n        children: \"Cargo.toml\"\n      }), \" we'll add the following dependencies:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-toml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"[dependencies]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# A panic handler is needed.  This is a crate with the most basic one.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"panic-halt\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"0.2.0\\\"\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"[dependencies.arduino-uno]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"git\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://github.com/Rahix/avr-hal\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"avr-hal\"\n      }), \" is a cargo workspace that contains a bunch of crates segregated by boards where the \", _jsx(_components.code, {\n        children: \"arduino-uno\"\n      }), \" crate is one\\nof them. Thanks to \", _jsx(_components.a, {\n        href: \"https://github.com/Rahix/avr-hal\",\n        children: \"Rahix\"\n      }), \" for putting this together.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We'll also need to add build metadata for cargo for the avr target. We'll create a file \", _jsx(_components.code, {\n        children: \"avr-atmega328p.json\"\n      }), \" in our project root with the following contents:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"llvm-target\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"avr-unknown-unknown\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"cpu\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"atmega328p\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"target-endian\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"little\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"target-pointer-width\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"16\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"target-c-int-width\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"16\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"os\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"unknown\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"target-env\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"target-vendor\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"unknown\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"arch\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"avr\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"data-layout\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"executables\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"true\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"linker\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"avr-gcc\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"linker-flavor\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gcc\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"pre-link-args\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"gcc\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-Os\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-mmcu=atmega328p\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"exe-suffix\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\".elf\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"post-link-args\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"gcc\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-Wl,--gc-sections\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"singlethread\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"no-builtins\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"no-default-libraries\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"eh-frame-header\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n  \\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"and reference it in \", _jsx(_components.code, {\n        children: \".cargo/config.toml\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-toml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"[build]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"target\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"avr-atmega328p.json\\\"\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"[unstable]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"build-std\"\n        }), \" = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"core\\\"\"\n        }), \"]\\n\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With that, our build configuration is complete.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"lets-write-some-code\",\n      children: _jsx(_components.a, {\n        href: \"#lets-write-some-code\",\n        children: \"Let's write some code\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the dependencies aside, let's add code under \", _jsx(_components.code, {\n        children: \"main.rs\"\n      }), \" and go through it incrementally:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"(Quick tip: You can run \", _jsx(_components.code, {\n        children: \"cargo doc --open\"\n      }), \" in your directory and have a documentation of this project along with its dependencies for ready reference)\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// main.rs\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#![no_std]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#![no_main]\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First we need to specify a few global attributes to let the compiler know that we are in a different environment.\\nWe are in an embedded environment which doesn't have functionalities that the \", _jsx(_components.a, {\n        href: \"https://github.com/rust-lang/rust/tree/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library/std\",\n        children: \"standard library crate\"\n      }), \" of Rust depends on such as heap allocation APIs, threads, network APIs etc. So we need to add the \", _jsx(_components.code, {\n        children: \"#[no_std]\"\n      }), \" attribute at the top. We also need to override the default entry point (\", _jsx(_components.code, {\n        children: \"fn main()\"\n      }), \") using \", _jsx(_components.code, {\n        children: \"#[no_main]\"\n      }), \" because we are going to be providing and defining our own entry point to the program. To define our entry point, we'll use the entry attribute macro from the \", _jsx(_components.code, {\n        children: \"arduino_uno\"\n      }), \" crate to define a custom entry point. Usually the board crate you use will provide an entry macro to you.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We then add \", _jsx(_components.code, {\n        children: \"use\"\n      }), \" statements to bring the required items in scope from the dependant crates.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extern\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"crate\"\n        }), \" panic_halt;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::prelude::*;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::hal::port::portb::PB5;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::hal::port::mode::Output;\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Notice the \", _jsx(_components.code, {\n        children: \"panic_halt\"\n      }), \" crate? We need a panic handler because:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the standard library panicking has a defined behavior: it unwinds the stack of the panicking thread, unless the user opted for aborting the program on panics. In programs without standard library, however, the panicking behavior is left undefined. A behavior can be chosen by declaring a #[panic_handler] function. Source: [\", _jsx(_components.a, {\n        href: \"https://rust-embedded.github.io/book/start/panicking.html\",\n        children: \"embedded rust book\"\n      }), \"]\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's move on:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#[arduino_uno::entry]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" ! {\\n    \\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then we have our \", _jsx(_components.code, {\n        children: \"main\"\n      }), \" function annotated with the \", _jsx(_components.code, {\n        children: \"entry\"\n      }), \" attribute macro from the \", _jsx(_components.code, {\n        children: \"arduino_uno\"\n      }), \" crate. The \", _jsx(_components.code, {\n        children: \"!\"\n      }), \" is\\nthe never type which denotes that the function never returns.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To blink the LED, we only need a few lines of code and set the relevant pin high or low. Let's take a look at the pin diagram of the ATmega328P chip on Uno:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://components101.com/sites/default/files/inline-images/ATMega328P-Arduino-Uno-Pin-Mapping.png\",\n        alt: \"ATmega328P chip diagram\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the diagram above, you can notice various pins on the microcontroller. Most microcontrollers, if not all, contain pins that allow the device to both read and write digital values to external circuits. Some of them are categorized as I/O ports.\\nA port is a group of pins representing a standard interface. These ports are controlled by port registers, which can be thought of as a special byte variable that we can change in our code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In case of ATmega328P, we have three port registers to work with:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"C – for analogue pins 0 to 5\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"D – for digital pins 0 to 7\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"B – for digital pins 8 to 13\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The details are explained better here: \", _jsx(_components.a, {\n        href: \"https://www.arduino.cc/en/Reference/PortManipulation\",\n        children: \"Port Manipulation\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you look at the Uno, we have the digital Pin 13 which is connected to the built-in LED.\\nWe need access to the pin in our code in order to manipulate the LED, i.e., set it high or low.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's add more code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#[arduino_uno::entry]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" ! {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"peripherals\"\n        }), \" = arduino_uno::Peripherals::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"take\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"unwrap\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"pins\"\n        }), \" = arduino_uno::Pins::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"new\"\n        }), \"(\\n        peripherals.PORTB,\\n        peripherals.PORTC,\\n        peripherals.PORTD,\\n    );\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"led\"\n        }), \" = pins.d13.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"into_output\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" pins.ddr);\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"loop\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"stutter_blink\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" led, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"25\"\n        }), \");\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There's a lot going on in the code above!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, we create an instance of \", _jsx(_components.code, {\n        children: \"Peripherals\"\n      }), \" which is a list of all peripherals in Uno.\\nPeripherals are devices that bridge the communication with your chip/cpu with external devices, sensors etc.\\nExamples of peripherals would be your timers, counters, serial port etc.\\nAn embedded processor interacts with a peripheral device through a set of control and status registers.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We then create a new \", _jsx(_components.code, {\n        children: \"Pin\"\n      }), \" instance passing in the ports from the peripheral instance \", _jsx(_components.code, {\n        children: \"peripherals\"\n      }), \".\\nWe then define a variable \", _jsx(_components.code, {\n        children: \"led\"\n      }), \" that will hold the pin number that the LED is connected to. This is created by configuring pin 13 as output pin using the \", _jsx(_components.code, {\n        children: \"into_output\"\n      }), \" method of the \", _jsx(_components.code, {\n        children: \"d13\"\n      }), \" pin and passing in a mutable reference to our \", _jsx(_components.code, {\n        children: \"ddr\"\n      }), \" register.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DDR register determines if pins on a specific port are inputs or outputs. The DDR register is 8 bits long and each bit corresponds to a pin on that I/O port. For example, the first bit (bit 0) of DDRB will determine if PB0 is an input or output, while the last bit (bit 7) will determine if PB7 is an input or output. I still need to do a bit more reading to fully understand DDR registers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next, we go into a \", _jsx(_components.code, {\n        children: \"loop {}\"\n      }), \" and call \", _jsx(_components.code, {\n        children: \"stutter_blink\"\n      }), \" function providing a mutable reference to our \", _jsx(_components.code, {\n        children: \"led\"\n      }), \" instance\\nand number of times (\", _jsx(_components.code, {\n        children: \"25\"\n      }), \") that we want to blink.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's our \", _jsx(_components.code, {\n        children: \"stutter_blink\"\n      }), \" function definition:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stutter_blink\"\n        }), \"(led: &\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" PB5<Output>, times: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \") {\\n    (\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"..times).\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"map\"\n        }), \"(|i| i * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"for_each\"\n        }), \"(|i| {\\n        led.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"toggle\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"void_unwrap\"\n        }), \"();\\n        arduino_uno::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"delay_ms\"\n        }), \"(i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"u16\"\n        }), \");\\n    });\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All we do in \", _jsx(_components.code, {\n        children: \"stutter_blink\"\n      }), \" is call toggle on \", _jsx(_components.code, {\n        children: \"led\"\n      }), \" followed by a \", _jsx(_components.code, {\n        children: \"delay_ms\"\n      }), \" call from the \", _jsx(_components.code, {\n        children: \"arduino_uno\"\n      }), \" module.\\nThis is all done in an iterator. We create a range \", _jsx(_components.code, {\n        children: \"(0..times)\"\n      }), \" followed by calling \", _jsx(_components.code, {\n        children: \"map\"\n      }), \" so that we can progressively delay the LED toggle by a noticeable amount. We could have definitely done this using a for loop and that would be more readable, but I wanted to demonstrate that we can use all the high level APIs and abstractions from Rust.\\nWe are writing functional code for an embedded systems where the abstractions are zero cost.\\nThat's a thing possible only in Rust as far as I know!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's the full code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rust\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// main.rs\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#![no_std]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#![no_main]\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extern\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"crate\"\n        }), \" panic_halt;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::prelude::*;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::hal::port::portb::PB5;\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"use\"\n        }), \" arduino_uno::hal::port::mode::Output;\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stutter_blink\"\n        }), \"(led: &\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" PB5<Output>, times: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"usize\"\n        }), \") {\\n    (\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"..times).\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"map\"\n        }), \"(|i| i * \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"for_each\"\n        }), \"(|i| {\\n        led.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"toggle\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"void_unwrap\"\n        }), \"();\\n        arduino_uno::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"delay_ms\"\n        }), \"(i \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"u16\"\n        }), \");\\n    });\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#[arduino_uno::entry]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fn\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"->\"\n        }), \" ! {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"peripherals\"\n        }), \" = arduino_uno::Peripherals::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"take\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"unwrap\"\n        }), \"();\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"pins\"\n        }), \" = arduino_uno::Pins::\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"new\"\n        }), \"(\\n        peripherals.PORTB,\\n        peripherals.PORTC,\\n        peripherals.PORTD,\\n    );\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut \"\n        }), _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"led\"\n        }), \" = pins.d13.\", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"into_output\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" pins.ddr);\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"loop\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_ invoke__\",\n          children: \"stutter_blink\"\n        }), \"(&\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"mut\"\n        }), \" led, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"25\"\n        }), \");\\n    }\\n}\\n\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's try to build this crate:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"cargo build\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If all went fine, you should see an elf file  \", _jsx(_components.code, {\n        children: \"rust-arduino-blink.elf\"\n      }), \" generated under \", _jsx(_components.code, {\n        children: \"target/avr-atmega328p/debug/\"\n      }), \" directory. That's the binary we need to flash to our Uno. To flash the elf file, we'll use the \", _jsx(_components.code, {\n        children: \"avrdude\"\n      }), \" utility. Let's create a script at the root directory named \", _jsx(_components.code, {\n        children: \"flash.sh\"\n      }), \" that does \", _jsx(_components.code, {\n        children: \"cargo build\"\n      }), \" followed by flashing it our uno:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"#! /usr/bin/zsh\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"set\"\n        }), \" -e\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [ \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$1\"\n          }), \"\\\"\"]\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"--help\\\"\"\n        }), \" ] || [ \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$1\"\n          }), \"\\\"\"]\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"-h\\\"\"\n        }), \" ]; \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"then\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"usage: \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$0\"\n          }), \" <path-to-binary.elf>\\\"\"]\n        }), \" >&2\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"exit\"\n        }), \" 1\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fi\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [ \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$#\"\n          }), \"\\\"\"]\n        }), \" -lt 1 ]; \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"then\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"echo\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$0\"\n          }), \": Expecting a .elf file\\\"\"]\n        }), \" >&2\\n    \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"exit\"\n        }), \" 1\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"fi\"\n        }), \"\\n\\nsudo -u creativcoder cargo build\\navrdude -q -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyACM0 -D \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"-Uflash:w:\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"$1\"\n          }), \":e\\\"\"]\n        }), \"\\n\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With that, we can now run (make sure your Uno is connected via the USB cable):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"./flash.sh target/avr-atmega328p/debug/rust-arduino-blink.elf\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and there you go:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://media.giphy.com/media/gFtGud1j5fNAl5yzlu/giphy.gif\",\n        alt: \"Rust on arduino\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our first blinking program on Arduino running Rust!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you get a permission denied error when accessing \", _jsx(_components.code, {\n        children: \"/dev/ttyACM0\"\n      }), \". You may need to add your user\\nto a linux user group that has access to the serial interface.\\nFirst, we find the group using:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"ls\"\n        }), \" -l /dev/ttyACM0\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I get the following output on my machine:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"crw-rw---- 1 root uucp 166, 0 Aug 19 03:29 /dev/ttyACM0\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add your username to \", _jsx(_components.code, {\n        children: \"uucp\"\n      }), \" group, we run:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"sudo usermod -a -G uucp creativcoder\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suggestions/comments/corrections most welcome.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I have several embedded hobby projects in plan, I will be writing about them in future as they progress. Here's the \", _jsx(_components.a, {\n        href: \"https://github.com/creativcoder/rust-arduino-blink\",\n        children: \"Github\"\n      }), \" for the code above.\\nIf you want to follow the latest in developement in Rust embedded space, follow the \", _jsx(_components.a, {\n        href: \"https://rust-embedded.github.io/blog/newsletter-24/\",\n        children: \"embedded rust working group\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Until next time!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"excerpt":"A whirlwind tour on quickly getting up and running with Rust on Arduino","slug":"rust-on-arduino-uno","title":"How to run Rust on Arduino Uno - Our first blink 💡","tags":["arduino","blink","embedded","rust","uno"],"date":"Wed Aug 19 2020 05:30:00 GMT+0530 (India Standard Time)","author":"creativcoder","readingTime":"9min"}}},"__N_SSG":true}