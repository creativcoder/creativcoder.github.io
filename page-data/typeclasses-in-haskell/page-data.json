{"componentChunkName":"component---src-templates-page-js","path":"/typeclasses-in-haskell","result":{"data":{"markdownRemark":{"frontmatter":{"title":"A short intro to type classes in Haskell","date":"19 June 2016","path":"/typeclasses-in-haskell","author":null,"excerpt":"Haskell as a language always fascinates me with its unique typesystem and constructs that offer expressiveness unlike other languages. In this article, I want to share something I learned about type classes in haskell.","tags":["haskell","functional programming","type theory","lambda calculus"],"coverImage":null},"id":"2f54fd47-b923-56c4-a00d-3211b74933ae","html":"<p>Haskell as a language always fascinates me with its unique typesystem and constructs that offers expressiveness unlike other languages.</p>\n<p>In this article, I want to share something I learned about type classes in Haskell. To do that, we need an example!</p>\n<p>Let's create a simple function in haskell that does some arithmetic to understand typeclasses.</p>\n<p>So here's our <code class=\"language-text\">magical</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- simple_haskell.hs</span>\n<span class=\"token hvariable\">magical</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">-</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's load this up in <code class=\"language-text\">ghci</code> real quick.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">l</span> <span class=\"token hvariable\">simple_haskell</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hs</span></code></pre></div>\n<p>Let's see the type of function <code class=\"language-text\">magical</code> by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token hvariable\">magical</span></code></pre></div>\n<p>We get something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span></code></pre></div>\n<p>That's a lot of <code class=\"language-text\">a</code>'s and I could hardly figure out what all that meant.</p>\n<p><img src=\"https://media.giphy.com/media/2wYWi6n5oNdIAH5bLW/giphy.gif\" alt=\"gif\"></p>\n<p>Y u no simple to read haskell. :|</p>\n<p>After endless sessions of skimming the interwebs here and there, I think I have a decent understanding from which to reason further about typeclasses.</p>\n<p>So, let's visit our signature again and break it down, shall we!</p>\n<p>In the signature above, the  <code class=\"language-text\">a -&gt; a -&gt; a</code> denotes that our function <code class=\"language-text\">magical</code> takes two types <code class=\"language-text\">a</code> (the first two <code class=\"language-text\">a</code>'s) and returns a type <code class=\"language-text\">a</code>.</p>\n<p>Take a note that the last one always is the return type. Actually, there is more going on here, which is called currying in functional lingo, but that will be part of another post.</p>\n<blockquote>\n<p>Side note: Functions in haskell always have an arity of 1, which means they always have one arguement.</p>\n</blockquote>\n<p>It's an unfamiliar syntax to many but not until you learn about lambda calculus or if you have some functional programming background. </p>\n<p>Anyways, what's with the first <code class=\"language-text\">Num a</code>. This is what what we are interested in.\nThe <code class=\"language-text\">Num</code> in <code class=\"language-text\">Num a</code>, is a <code class=\"language-text\">typeclass</code> in haskell, and the <code class=\"language-text\">a</code>, is what we call a type variable, (just a placeholder if you will).</p>\n<p>Typeclasses in haskell are a construct which encapsulates different functions or behaviors for any type, that falls under that typeclass. They allow you to generalize over a multitude of types confirming to a set of protocol.</p>\n<p>As an analogy, the <code class=\"language-text\">Num</code> typeclass in Haskell is a holder of a family of concrete <code class=\"language-text\">Num</code>ish types, which can be <code class=\"language-text\">int</code>, <code class=\"language-text\">long</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">double</code> etc. Similary <code class=\"language-text\">Eq</code> is another typeclass in haskell used to provide total ordering semantics for two comparable types.</p>\n<p>That's all folks. I intend to update this article in future with more details.</p>","excerpt":"Haskell as a language always fascinates me with its unique typesystem and constructs that offers expressiveness unlike other languages. Inâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/community-bonding-gsoc-servo","title":"Post community bonding period with Servo- GSoC'16","tags":["servo","rust","open-source","gsoc"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/community-bonding-gsoc-servo.md"},"previous":{"frontmatter":{"path":"/service-workers-servo","title":"Basic Service Worker support lands in Servo","tags":["servo","rust","open-source","gsoc"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/service-workers-servo.md"}}}}