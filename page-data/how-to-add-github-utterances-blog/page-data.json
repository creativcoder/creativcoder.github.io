{"componentChunkName":"component---src-templates-page-js","path":"/how-to-add-github-utterances-blog","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to add Github utterances comments on your blog","date":"05 July 2020","path":"/how-to-add-github-utterances-blog","author":null,"excerpt":"Utterances is a free and opensource comments powered by Github","tags":["blog","opensource","comments","utterances"],"coverImage":null},"id":"8ad64b96-71d1-5fda-a4a4-d182cf592a76","html":"<p>This post is about integrating comment support in your blog using a free and open source Github app.</p>\n<p><img src=\"https://images.unsplash.com/photo-1521225753516-46438a76f25a\"></p>\n<p>Providing a way to engage with your audience is probably the next step you should do if your blog is helping others in someway. Back when I had used hugo as my static site generator, I had used disqus, which is a comments service/system. But as with ordinary third party services disqus is notorious for putting ads and is slow to render. Being a big fan of code reuse and open source, I knew there must be a way for me to somehow use a free and managed comment system. After a day of sifting through the interwebs, I finally found a solution that I think for the time being serves my purpose of engaing with my audience.</p>\n<p>This post is quick guide on how to integrate Github's utterances comments system into your blog.</p>\n<blockquote>\n<p>Disclaimer: This comments system only works if your target audience has a Github account, which in majority of cases are developers. As my blog is mostly oriented towards developers this aligns perfectly with my blog. </p>\n</blockquote>\n<p>The official guide of <a href=\"https://utteranc.es/\">utterances</a> mentions integrating the comment widget on a vanilla html site. That did not work for my case, as I happen to be running a site that is generated by GatsbyJS, which I think is a really efficient static site generator not only in terms of development experience but also in the performane of generated sites compared to my past experiences with static site generators such as hugo. Give it a try.</p>\n<p>Gatsby uses React under the hood which meant that I needed.</p>\n<p>I am by no means a React expert or even a frontend expert, but the following steps\nis me just sifting through bunch of documentation pages and tying them together into\na working solution.</p>\n<p>Ok, so here's how I did it.</p>\n<p>First, we need to create a Github repository (a public repository) that will act\nas a placeholder for issues to be created within.</p>\n<p>Next, go to: <a href=\"https://github.com/apps/utterances\">https://github.com/apps/utterances</a> page.</p>\n<p>From the utternaces page, the following content need to be embedded somewhere in the page:</p>\n<p>I first created a Comment react component (functional), With the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// commment.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useRef<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStaticQuery<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Comment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>commentBox<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>commentBox<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"comments\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Comment</code></pre></div>\n<p>Next In</p>\n<p>Next, I have a <code class=\"language-text\">Posts</code> component in my page where each post gets rendered. Next </p>\n<p><Comment commentBox={commentBox} />}</p>","excerpt":"This post is about integrating comment support in your blog using a free and open source Github app.  Providing a way to engage with yourâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/quick-way-to-try-crates","title":"A simple script to try Rust crates locally","tags":["script","automation","productivity","rust","crates.io","crates"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/quick-way-to-try-crates.md"},"previous":null}}}