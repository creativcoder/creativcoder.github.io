{"componentChunkName":"component---src-templates-page-js","path":"/quick-way-to-try-crates","result":{"data":{"markdownRemark":{"frontmatter":{"title":"A simple script to try Rust crates locally","date":"21 June 2020","path":"/quick-way-to-try-crates","author":null,"excerpt":"Reducing the time for experimentation","tags":["script","automation","productivity","rust","crates.io","crates"],"coverImage":null},"id":"e5acb3d5-892b-5101-a1f8-aab37fb5f874","html":"<p><img src=\"https://unsplash.com/photos/_c70Nhh6p44/download?force=true&#x26;w=1920%22Image%20credits:%20https://www.pexels.com/@pixabay%22\" alt=\"microscope\"></p>\n<h2>The problem we are solving here</h2>\n<p>Often times I find myself wanting to try crates locally on my machine when exploring the plethora of Rust crates available on\n<a href=\"https://crates.io\">crates.io</a> from their Github page. The usual process goes like this:</p>\n<p>Open terminal >\nGo to my experiments folder >\nDo git clone >\nTry building the crate and run provided examples if any >\nAt this point I might decide if I want to use this crate or discard it away. Most of the times I just <code class=\"language-text\">cd</code> out of the folder and get back to my work and forget that I need to remove the crate directory from my machine.</p>\n<p>As time passes and the more crates you explore, the amount of crates fills up quickly on your machine. You then have to manually sift through them to remove them. Also, a lot of space is used by the <code class=\"language-text\">/target</code> directory if you build these projects and forget to run <code class=\"language-text\">cargo clean</code> afterwards.</p>\n<p>To alleviate the problem of crates piling up in my home directory,\nI created this simple script I named <code class=\"language-text\">try_crate</code> which has the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/sh</span>\n\n<span class=\"token builtin class-name\">cd</span> /tmp\n<span class=\"token assign-left variable\">repo_url</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>xclip -selection c -o<span class=\"token variable\">`</span></span>\n<span class=\"token function\">git</span> clone <span class=\"token variable\">$repo_url</span>\n<span class=\"token assign-left variable\">dirname</span><span class=\"token operator\">=</span><span class=\"token variable\">${repo_url<span class=\"token operator\">##</span>*<span class=\"token operator\">/</span>}</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$dirname</span></code></pre></div>\n<h2>What's happening there?</h2>\n<p>We use the <code class=\"language-text\">/tmp</code> directory to clone our crate locally and we simply copy the crate's Github URL from the clipboard. This means before you run this script, we need to copy the repository URL via <code class=\"language-text\">Ctrl+C</code>, which I usually do when cloning repos manually from the URL address bar. Cloning in <code class=\"language-text\">/tmp</code> directory solves my problem of having to remove the crate manually. After every system restart the <code class=\"language-text\">/tmp</code> directory is wiped clean.</p>\n<p>I can then immediately run cargo run or <code class=\"language-text\">cargo run --example &lt;example name&gt;</code> to explore the crate.</p>\n<h2>Using the script</h2>\n<p>To use this script:</p>\n<ul>\n<li>Make it executable: <code class=\"language-text\">chmod +x try_crate</code></li>\n<li>Copy it to <code class=\"language-text\">/usr/local/bin</code></li>\n<li>Copy the URL of the repository you want to copy (Ctrl + C)</li>\n<li>You can then run: <code class=\"language-text\">. try_crate</code></li>\n</ul>\n<p>The sourcing <code class=\"language-text\">.</code> is important here as we want to remain in the same <code class=\"language-text\">/tmp</code> directory after execution of this script. The <code class=\"language-text\">.</code> runs the script as part of the current shell instance rather than spawning a new shell session.</p>\n<p>Well, that's about it. This is far from an ingenious script, but shaves off some time when I am working on multiple projects and need to experiment things quickly without cluttering my workspace. </p>\n<p>Thank you!</p>","excerpt":"microscope The problem we are solving here Often times I find myself wanting to try crates locally on my machine when exploring the plethoraâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/rust-2018","title":"Making Rust more awesome in 2018 - My wishlist","tags":["new year","new goals","community","2018"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/rust-2018.md"},"previous":null}}}