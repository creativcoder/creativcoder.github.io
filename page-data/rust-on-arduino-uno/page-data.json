{"componentChunkName":"component---src-templates-page-js","path":"/rust-on-arduino-uno","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to run Rust on Arduino Uno - Our first blink ðŸ’¡","date":"19 August 2020","path":"/rust-on-arduino-uno","author":null,"excerpt":"A whirlwind tour on quickly getting up and running with Rust on Arduino","tags":["rust","arduino","uno","embedded","blink"],"coverImage":null},"id":"2c39596a-d371-5506-85d1-62369f207b8b","html":"<p><img src=\"https://images.unsplash.com/photo-1597792134982-4afde30f32fa?ixlib=rb-1.2.1&#x26;q=80&#x26;fm=jpg&#x26;crop=entropy&#x26;cs=tinysrgb&#x26;dl=creativcoder-CbLyJEh23rA-unsplash.jpg&#x26;w=1920\"></p>\n<p>At the time of writing this, about a month ago, the rust-avr fork was merged <a href=\"https://github.com/rust-lang/rust/issues/44052#issuecomment-663394401\">upstream</a>. This means that you can now compile Rust programs for the avr microcontroller board by just running <code class=\"language-text\">cargo +nightly build</code>, providing a <code class=\"language-text\">.cargo/config.toml</code> for your target (<code class=\"language-text\">avr-unknown-unknown</code>). That's huge!</p>\n<p>I have always been fascinated with the idea of using code to manipulate and affect physical objects. This is probably going to be a series of blog posts on my adventures with Rust on Arduino and maybe ESP8266 and discovery F3 in future. (I have these lying around too). Kicking off the series with this first post.</p>\n<hr>\n<p><em>Target audience</em>: This post is written with beginner to intermediate folks in mind who want a head start with embedded systems in Rust with Arduino. Once you have gone through this post, you may wanna go through the through the basics on <a href=\"https://rust-embedded.github.io/book/intro/index.html\">embedded rust book</a>. The code in the post is compiled on a Linux machine (Arch linux) with Rust compiler version: <code class=\"language-text\">rustc 1.47.0-nightly (22ee68dc5 2020-08-05)</code>.</p>\n<hr>\n<p>We'll take a whirlwind tour on how to run Rust on the Arduino Uno, which is probably the most widely known and used development board in the hobbyist embedded domain. The <a href=\"https://store.arduino.cc/usa/arduino-uno-rev3\">Arduino Uno</a> is based on the ATmega328P, which is an 8 bit microcontroller falling under the family AVR. AVR is a family of micro-controllers developed since 1996 by Atmel, which was later acquired by Microchip technology. If you wanna read more about that, head over here: <a href=\"https://book.avr-rust.com/001-introduction.html\">AVR-Rust book</a></p>\n<p>With that brief history aside, let's get into it!</p>\n<p>We'll do the hello world of arduino which is blinking its built-in LED. It's a very simple exercise, but there's a lot to learn as a beginner.</p>\n<h2><a href=\"#setting-up-our-project\">Setting up our project</a></h2>\n<p>First, we'll create a new cargo project by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo new rust-arduino-blink</code></pre></div>\n<p>We'll need to cross compile our project for the avr target (target triple:<code class=\"language-text\">avr-unknown-unknown</code>).\nFor this we'll need to switch to the nightly toolchain as some of the dependent crates use unstable features to make all of this happen. So we'll run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">rustup override <span class=\"token builtin class-name\">set</span> nightly</code></pre></div>\n<p>The above command overrides the toolchain of choice for only our current directory to be nightly.</p>\n<p>Then we'll install the required packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pacman -S avr-gcc</code></pre></div>\n<p>The <code class=\"language-text\">avr-gcc</code> package is required to use the linker.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pacman -S arduino-avr-core</code></pre></div>\n<p>The <code class=\"language-text\">arduino-avr-core</code> package contains utilities such as <a href=\"https://www.nongnu.org/avrdude/\">avrdude</a> which is a tool to upload and manipulate ROM and EEPROM contents of microcontrollers using the in-system programming technique.</p>\n<p>I am on an arch linux distro (endeavour OS) where <code class=\"language-text\">pacman</code> is our package manager.</p>\n<p>Then, under <code class=\"language-text\">Cargo.toml</code> we'll add the following dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># A panic handler is needed.  This is a crate with the most basic one.</span>\n<span class=\"token key property\">panic-halt</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2.0\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies.arduino-uno</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">git</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/Rahix/avr-hal\"</span></code></pre></div>\n<p><code class=\"language-text\">avr-hal</code> is a cargo workspace that contains a bunch of crates segregated by boards where the <code class=\"language-text\">arduino-uno</code> crate is one\nof them. Thanks to <a href=\"https://github.com/Rahix/avr-hal\">Rahix</a> for putting this together.</p>\n<p>We'll also need to add build metadata for cargo for the avr target. We'll create a file <code class=\"language-text\">avr-atmega328p.json</code> in our project root with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"llvm-target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"avr-unknown-unknown\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"cpu\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"atmega328p\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target-endian\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"little\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target-pointer-width\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"16\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target-c-int-width\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"16\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target-vendor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"arch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"avr\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data-layout\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\"</span><span class=\"token punctuation\">,</span>\n  \n    <span class=\"token property\">\"executables\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  \n    <span class=\"token property\">\"linker\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"avr-gcc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"linker-flavor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pre-link-args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"gcc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-Os\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-mmcu=atmega328p\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"exe-suffix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".elf\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"post-link-args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"gcc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-Wl,--gc-sections\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  \n    <span class=\"token property\">\"singlethread\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-builtins\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  \n    <span class=\"token property\">\"no-default-libraries\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  \n    <span class=\"token property\">\"eh-frame-header\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p>and reference it in <code class=\"language-text\">.cargo/config.toml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">build</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">target</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"avr-atmega328p.json\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">unstable</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">build-std</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"core\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>With that, our build configuration is complete.</p>\n<h2><a href=\"#lets-write-some-code\">Let's write some code</a></h2>\n<p>With the dependencies aside, let's add code under <code class=\"language-text\">main.rs</code> and go through it incrementally:</p>\n<p>(Quick tip: You can run <code class=\"language-text\">cargo doc --open</code> in your directory and have a documentation of this project along with its dependencies for ready reference)</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// main.rs</span>\n\n<span class=\"token attribute attr-name\">#![no_std]</span>\n<span class=\"token attribute attr-name\">#![no_main]</span></code></pre></div>\n<p>First we need to specify a few global attributes to let the compiler know that we are in a different environment.\nWe are in an embedded environment which doesn't have functionalities that the <a href=\"https://github.com/rust-lang/rust/tree/5b04bbfcbb79ed7325ea2b580458a80d95da6bbb/library/std\">standard library crate</a> of Rust depends on such as heap allocation APIs, threads, network APIs etc. So we need to add the <code class=\"language-text\">#[no_std]</code> attribute at the top. We also need to override the default entry point (<code class=\"language-text\">fn main()</code>) using <code class=\"language-text\">#[no_main]</code> because we are going to be providing and defining our own entry point to the program. To define our entry point, we'll use the entry attribute macro from the <code class=\"language-text\">arduino_uno</code> crate to define a custom entry point. Usually the board crate you use will provide an entry macro to you.</p>\n<p>We then add <code class=\"language-text\">use</code> statements to bring the required items in scope from the dependant crates.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> panic_halt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>hal<span class=\"token punctuation\">::</span>port<span class=\"token punctuation\">::</span>portb<span class=\"token punctuation\">::</span>PB5<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>hal<span class=\"token punctuation\">::</span>port<span class=\"token punctuation\">::</span>mode<span class=\"token punctuation\">::</span>Output<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice the <code class=\"language-text\">panic_halt</code> crate? We need a panic handler because:</p>\n<p>In the standard library panicking has a defined behavior: it unwinds the stack of the panicking thread, unless the user opted for aborting the program on panics. In programs without standard library, however, the panicking behavior is left undefined. A behavior can be chosen by declaring a #[panic_handler] function. Source: [<a href=\"https://rust-embedded.github.io/book/start/panicking.html\">embedded rust book</a>]</p>\n<p>Let's move on:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[arduino_uno::entry]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we have our <code class=\"language-text\">main</code> function annotated with the <code class=\"language-text\">entry</code> attribute macro from the <code class=\"language-text\">arduino_uno</code> crate. The <code class=\"language-text\">!</code> is\nthe never type which denotes that the function never returns. </p>\n<p>To blink the LED, we only need a few lines of code and set the relevant pin high or low. Let's take a look at the pin diagram of the ATmega328P chip on Uno:</p>\n<p><img src=\"https://components101.com/sites/default/files/inline-images/ATMega328P-Arduino-Uno-Pin-Mapping.png\" alt=\"ATmega328P chip diagram\"></p>\n<p>In the diagram above, you can notice various pins on the microcontroller. Most microcontrollers, if not all, contain pins that allow the device to both read and write digital values to external circuits. Some of them are categorized as I/O ports.\nA port is a group of pins representing a standard interface. These ports are controlled by port registers, which can be thought of as a special byte variable that we can change in our code.</p>\n<p>In case of ATmega328P, we have three port registers to work with:</p>\n<ul>\n<li>C â€“ for analogue pins 0 to 5</li>\n<li>D â€“ for digital pins 0 to 7</li>\n<li>B â€“ for digital pins 8 to 13</li>\n</ul>\n<p>The details are explained better here: <a href=\"https://www.arduino.cc/en/Reference/PortManipulation\">Port Manipulation</a></p>\n<p>If you look at the Uno, we have the digital Pin 13 which is connected to the built-in LED.\nWe need access to the pin in our code in order to manipulate the LED, i.e., set it high or low.</p>\n<p>Let's add more code:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[arduino_uno::entry]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> peripherals <span class=\"token operator\">=</span> arduino_uno<span class=\"token punctuation\">::</span>Peripherals<span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pins <span class=\"token operator\">=</span> arduino_uno<span class=\"token punctuation\">::</span>Pins<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTB<span class=\"token punctuation\">,</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTC<span class=\"token punctuation\">,</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTD<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> led <span class=\"token operator\">=</span> pins<span class=\"token punctuation\">.</span>d13<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stutter_blink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> led<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There's a lot going on in the code above!</p>\n<p>First, we create an instance of <code class=\"language-text\">Peripherals</code> which is a list of all peripherals in Uno.\nPeripherals are devices that bridge the communication with your chip/cpu with external devices, sensors etc.\nExamples of peripherals would be your timers, counters, serial port etc.\nAn embedded processor interacts with a peripheral device through a set of control and status registers.</p>\n<p>We then create a new <code class=\"language-text\">Pin</code> instance passing in the ports from the peripheral instance <code class=\"language-text\">peripherals</code>.\nWe then define a variable <code class=\"language-text\">led</code> that will hold the pin number that the LED is connected to. This is created by configuring pin 13 as output pin using the <code class=\"language-text\">into_output</code> method of the <code class=\"language-text\">d13</code> pin and passing in a mutable reference to our <code class=\"language-text\">ddr</code> register.</p>\n<p>DDR register determines if pins on a specific port are inputs or outputs. The DDR register is 8 bits long and each bit corresponds to a pin on that I/O port. For example, the first bit (bit 0) of DDRB will determine if PB0 is an input or output, while the last bit (bit 7) will determine if PB7 is an input or output. I still need to do a bit more reading to fully understand DDR registers.</p>\n<p>Next, we go into a <code class=\"language-text\">loop {}</code> and call <code class=\"language-text\">stutter_blink</code> function providing a mutable reference to our <code class=\"language-text\">led</code> instance\nand number of times (<code class=\"language-text\">25</code>) that we want to blink.</p>\n<p>Here's our <code class=\"language-text\">stutter_blink</code> function definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">stutter_blink</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> PB5<span class=\"token operator\">&lt;</span>Output<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>i<span class=\"token operator\">|</span> i <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>i<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        led<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">void_unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arduino_uno<span class=\"token punctuation\">::</span><span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">as</span> u16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All we do in <code class=\"language-text\">stutter_blink</code> is call toggle on <code class=\"language-text\">led</code> followed by a <code class=\"language-text\">delay_ms</code> call from the <code class=\"language-text\">arduino_uno</code> module.\nThis is all done in an iterator. We create a range <code class=\"language-text\">(0..times)</code> followed by calling <code class=\"language-text\">map</code> so that we can progressively delay the LED toggle by a noticeable amount. We could have definitely done this using a for loop and that would be more readable, but I wanted to demonstrate that we can use all the high level APIs and abstractions from Rust.\nWe are writing functional code for an embedded systems where the abstractions are zero cost.\nThat's a thing possible only in Rust as far as I know!</p>\n<p>Here's the full code:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// main.rs</span>\n\n<span class=\"token attribute attr-name\">#![no_std]</span>\n<span class=\"token attribute attr-name\">#![no_main]</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> panic_halt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>hal<span class=\"token punctuation\">::</span>port<span class=\"token punctuation\">::</span>portb<span class=\"token punctuation\">::</span>PB5<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> arduino_uno<span class=\"token punctuation\">::</span>hal<span class=\"token punctuation\">::</span>port<span class=\"token punctuation\">::</span>mode<span class=\"token punctuation\">::</span>Output<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">stutter_blink</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> PB5<span class=\"token operator\">&lt;</span>Output<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">:</span> usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>i<span class=\"token operator\">|</span> i <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>i<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        led<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">void_unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arduino_uno<span class=\"token punctuation\">::</span><span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">as</span> u16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[arduino_uno::entry]</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> peripherals <span class=\"token operator\">=</span> arduino_uno<span class=\"token punctuation\">::</span>Peripherals<span class=\"token punctuation\">::</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pins <span class=\"token operator\">=</span> arduino_uno<span class=\"token punctuation\">::</span>Pins<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTB<span class=\"token punctuation\">,</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTC<span class=\"token punctuation\">,</span>\n        peripherals<span class=\"token punctuation\">.</span>PORTD<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> led <span class=\"token operator\">=</span> pins<span class=\"token punctuation\">.</span>d13<span class=\"token punctuation\">.</span><span class=\"token function\">into_output</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pins<span class=\"token punctuation\">.</span>ddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stutter_blink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> led<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's try to build this crate:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo build</code></pre></div>\n<p>If all went fine, you should see an elf file  <code class=\"language-text\">rust-arduino-blink.elf</code> generated under <code class=\"language-text\">target/avr-atmega328p/debug/</code> directory. That's the binary we need to flash to our Uno. To flash the elf file, we'll use the <code class=\"language-text\">avrdude</code> utility. Let's create a script at the root directory named <code class=\"language-text\">flash.sh</code> that does <code class=\"language-text\">cargo build</code> followed by flashing it our uno:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /usr/bin/zsh</span>\n\n<span class=\"token builtin class-name\">set</span> -e\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"--help\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-h\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"usage: <span class=\"token variable\">$0</span> &lt;path-to-binary.elf>\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$#</span>\"</span> -lt <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>: Expecting a .elf file\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function\">sudo</span> -u creativcoder cargo build\navrdude -q -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyACM0 -D <span class=\"token string\">\"-Uflash:w:<span class=\"token variable\">$1</span>:e\"</span></code></pre></div>\n<p>With that, we can now run (make sure your Uno is connected via the USB cable):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./flash.sh target/avr-atmega328p/debug/rust-arduino-blink.elf</code></pre></div>\n<p>and there you go:</p>\n<p><img src=\"https://media.giphy.com/media/gFtGud1j5fNAl5yzlu/giphy.gif\" alt=\"Rust on arduino\"></p>\n<p>Our first blinking program on Arduino running Rust!</p>\n<p>If you get a permission denied error when accessing <code class=\"language-text\">/dev/ttyACM0</code>. You may need to add your user\nto a linux user group that has access to the serial interface.\nFirst, we find the group using:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> -l /dev/ttyACM0</code></pre></div>\n<p>I get the following output on my machine:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">crw-rw---- <span class=\"token number\">1</span> root uucp <span class=\"token number\">166</span>, <span class=\"token number\">0</span> Aug <span class=\"token number\">19</span> 03:29 /dev/ttyACM0</code></pre></div>\n<p>To add your username to <code class=\"language-text\">uucp</code> group, we run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -a -G uucp creativcoder</code></pre></div>\n<p>Suggestions/comments/corrections most welcome.</p>\n<p>I have several embedded hobby projects in plan, I will be writing about them in future as they progress. Here's the <a href=\"https://github.com/creativcoder/rust-arduino-blink\">Github</a> for the code above.\nIf you want to follow the latest in developement in Rust embedded space, follow the <a href=\"https://rust-embedded.github.io/blog/newsletter-24/\">embedded rust working group</a></p>\n<p>Until next time!</p>","excerpt":"At the time of writing this, about a month ago, the rust-avr fork was merged upstream. This means that you can now compile Rust programs forâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/how-to-add-github-utterances-blog","title":"How to add comment support on your Gatsby blog using Github utterances","tags":["blog","opensource","comments","utterances"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/add-github-utterances-to-blog.md"},"previous":{"frontmatter":{"path":"/setup-nextjs-tailwind","title":"How to setup NextJS with TailwindCSS ðŸŒŠ","tags":["tailwindcss","react","nextjs","stylesheets","frontend"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/setup-nextjs-tailwind.md"}}}}