{"componentChunkName":"component---src-templates-page-js","path":"/trait-objects-in-rust","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Using Trait objects in Rust","date":"21 February 2016","path":"/trait-objects-in-rust","author":null,"excerpt":"making your rust code polymorphic","tags":["rust","trait objects","dispatch"],"coverImage":null},"id":"f474ec1c-62fa-5cd2-88fc-406f3d78aee4","html":"<p>This post aims to provide a very gentle introduction to traits objects in rust aimed at people who already are familiar with Traits in Rust. If you don't know about traits well, a good read is <a href=\"http://blog.rust-lang.org/2015/05/11/traits.html\">here</a>. In brief, a trait is the specification of an interface. That interface can contain functions (both member, and non-member), types and constants. In Rust world, most of the constructs we use like operators, functions, loops are modelled as traits. Traits also serve the purpose of marking entities as being thread safe (the Send and Sync) or not safe. As an analogy to other programming language, traits are similar to typeclasses in haskell.</p>\n<p>We get a trait object when things are referenced not by their actual type but by the trait that\nthey are implementing. Trait objects in Rust are denoted by an <code class=\"language-text\">&amp;</code> before their name. So when can we use a trait object? A possible use case is shown here. We will build our understanding by taking a real world example. Understanding this way eventually leads us to the insight of applying it into our day today rust code.</p>\n<p>Let's say we want to create a musician object who is very versatile and our goal is to give him the ability, or more technically a <code class=\"language-text\">method</code>  by which he can play any instrument given to him.\nLet's create the type:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> Musician <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span>String\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll then create a constructor for our <code class=\"language-text\">Musician</code> so that it's easy to create a new Musician instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> Musician <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        Musician <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's also create some instruments for the musician to play.</p>\n<p>A Piano.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> Piano <span class=\"token punctuation\">{</span>\n    keys<span class=\"token punctuation\">:</span>usize\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Piano <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span>usize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        Piano <span class=\"token punctuation\">{</span> keys<span class=\"token punctuation\">:</span> key <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and a Guitar.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> GuitarType <span class=\"token punctuation\">{</span>\n    Acoustic<span class=\"token punctuation\">,</span>\n    Electric\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">use</span> GuitarType<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Guitar <span class=\"token punctuation\">{</span>\n    _type<span class=\"token punctuation\">:</span>GuitarType\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Guitar <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>_typ<span class=\"token punctuation\">:</span>GuitarType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        Guitar <span class=\"token punctuation\">{</span> _type<span class=\"token punctuation\">:</span> _typ <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let's define a trait called <code class=\"language-text\">Playable</code>, that has a method called <code class=\"language-text\">play</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">trait</span> Playable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll impl the <code class=\"language-text\">Playable</code> trait for both of our instruments:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> Playable <span class=\"token keyword\">for</span> Guitar <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"playing guitar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Playable <span class=\"token keyword\">for</span> Piano <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"playing piano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now comes the interesting part. Look closely.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> Musician <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">play_instrument</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> ins<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>Playable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ins<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> musician <span class=\"token operator\">=</span> Musician<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musician<span class=\"token punctuation\">.</span><span class=\"token function\">play_instrument</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Piano<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    musician<span class=\"token punctuation\">.</span><span class=\"token function\">play_instrument</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Guitar<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Acoustic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above, we are defining a generic method <code class=\"language-text\">play_instrument</code> on our <code class=\"language-text\">Musician</code> struct that can take any type (<code class=\"language-text\">&amp;Playable</code>) that implements the Playable trait. We have used a trait object here.</p>\n<p>The <code class=\"language-text\">play_instrument</code> method will take any type implementing the <code class=\"language-text\">Playable</code> trait as a argument for <code class=\"language-text\">ins</code> parameter, which in our case are <code class=\"language-text\">Guitar</code> and <code class=\"language-text\">Piano</code>.</p>\n<p>Using trait objects, we have made our <code class=\"language-text\">Musician</code>, play any instrument. In this way it play a guitar as well as a piano.</p>\n<p>Trait objects mimics a sort of dynamic dispatch or runtime polymorphism.\nIt uses virtual method table internally, for resolving the appropriate method to call.\nDuring invocation of the <code class=\"language-text\">play_instrument</code> at runtime, Rust uses two pointers: one for the value with which the method was invoked and other which points to a table of methods for the given trait impls. After resolving the correct method using pointer arithmetic, it passes the value pointer to that specific method. This all happens at runtime. This means that trait objects have a runtime overhead as compared to static dispatch using only traits.</p>\n<p>Hope that was helpful. Have a great day!</p>","excerpt":"This post aims to provide a very gentle introduction to traits objects in rust aimed at people who already are familiar with Traits in Rust…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/understanding-http-part-1","title":"Understanding the HTTP Protocol in simple terms part 1","tags":null},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/understanding-the-http-protocol-part-1.md"},"previous":{"frontmatter":{"path":"/it-begins-gsoc","title":"So it begins with Servo: GSOC'16","tags":["servo","rust","open-source","gsoc"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/it-begins-gsoc.md"}}}}