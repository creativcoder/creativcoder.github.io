{"componentChunkName":"component---src-templates-page-js","path":"/checking-memory-leaks-ffi","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Valgrind with Rust - Checking memory leaks in your ffi library","date":"13 March 2017","path":"/checking-memory-leaks-ffi","author":"creativcoder","excerpt":"A quick guide on using Valgrind on Rust code","tags":["profiling","rust","memory","valgrind"],"coverImage":null},"id":"c38706b4-c636-5256-bdc6-927603279a01","html":"<p>If you are someone writing Rust wrappers for C libraries, then you might as well wanna verify that you are doing the right cleanups in your destructors or you might ignorantly create potential memory leaks from usage of your library. In this post we'll see how to use the very same tool you use in your C programs, i.e., <em>Valgrind</em> to check for memory leaks in your wrapper library written in Rust.</p>\n<p>In order to check for memory leaks we should first have code that does the leaking. Just to keep it brief we won't show a FFI library example, but we'll see a tiny example library exposing a method that does some allocation and forgets to release memory at the end of its scope (using <a href=\"https://doc.rust-lang.org/std/mem/fn.forget.html\">mem-forget</a>).</p>\n<p>So here's our small library called <code class=\"language-text\">leaky_lib</code> with just one API called <code class=\"language-text\">allocate()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[lib.rs]\nuse std::mem;\n\npub fn allocate() {\n    use std::mem;\n    let bad_vec: Vec&lt;char&gt; = Vec::with_capacity(1024);\n    for _ in 0..1024 {\n        bad_vec.push(&#39;0&#39;);\n    }\n    mem::forget(bad_vec);\n}\n\n[main.rs]\nfn main() {\n    allocate();\n}</code></pre></div>\n<p>Here, <code class=\"language-text\">allocate()</code> allocates memory on the heap then we deliberately tell it to forget about that allocation thereby explicitely causing memory leak.</p>\n<p>Now if we run our program with <code class=\"language-text\">valgrind --leak-check=full ./target/release/leaky_lib</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">creativcoder% valgrind --leak-check=full ./target/release/leaky_lib \n==2488== Memcheck, a memory error detector\n==2488== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.\n==2488== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==2488== Command: ./target/release/leaky_lib\n==2488== \n==2488== \n==2488== HEAP SUMMARY:\n==2488==     in use at exit: 0 bytes in 0 blocks\n==2488==   total heap usage: 6 allocs, 6 frees, 2,000 bytes allocated\n==2488== \n==2488== All heap blocks were freed -- no leaks are possible\n==2488== \n==2488== For counts of detected and suppressed errors, rerun with: -v\n==2488== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</code></pre></div>\n<p>To our surprise, the leak doesn't show up anywhere in valgrind logs. What is happening here :O ?</p>\n<p>The reason behind this is with the use of <code class=\"language-text\">jemalloc</code> being used as the default allocator in <code class=\"language-text\">rustc</code>, which as of now doesn't play well with valgrind (See details on this <a href=\"https://github.com/rust-lang/rust/issues/28224\">issue</a>)</p>\n<p>But fear not, Rust also allows us to fallback to OS's default allocator APIs i.e., the <code class=\"language-text\">free</code> and <code class=\"language-text\">malloc</code>. This can be opted in by using compiler attributes at your crate root (<code class=\"language-text\">lib.rs</code>) as shown below. </p>\n<blockquote>\n<p>NOTE: Switching allocators only works for nightly release as of now. So just do a <code class=\"language-text\">rustup override set nightly</code> to switch to nightly toolchain</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#![feature(alloc_system)]\nextern crate alloc_system;</code></pre></div>\n<p>Once we have the above attribute in place, let's try running valgrind again.\n(Some lines omitted for brevity)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">creativcoder% valgrind --leak-check=full ./target/release/leaky_lib\n==3198== Memcheck, a memory error detector\n==3198== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.\n==3198== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==3198== Command: ./target/release/leaky_lib\n==3198== \n==3198== \n==3198== HEAP SUMMARY:\n==3198==     in use at exit: 4,096 bytes in 1 blocks\n==3198==   total heap usage: 15 allocs, 14 frees, 6,339 bytes allocated\n==3198== \n==3198== LEAK SUMMARY:\n==3198==    definitely lost: 4,096 bytes in 1 blocks\n==3198==    indirectly lost: 0 bytes in 0 blocks\n==3198==      possibly lost: 0 bytes in 0 blocks\n==3198==    still reachable: 0 bytes in 0 blocks\n==3198==         suppressed: 0 bytes in 0 blocks\n==3198== \n==3198== For counts of detected and suppressed errors, rerun with: -v\n==3198== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</code></pre></div>\n<p>Aha! this time we can see our leaks...</p>\n<p>Now let's quickly remove our explicit leaky intentions from the code. By that I mean removing the <code class=\"language-text\">mem::forget(v)</code> and re-run this again.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">creativcoder% valgrind --leak-check=full ./target/release/leaky_lib\n==3837== Memcheck, a memory error detector\n==3837== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.\n==3837== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==3837== Command: ./target/release/leaky_lib\n==3837== \n==3837== \n==3837== HEAP SUMMARY:\n==3837==     in use at exit: 0 bytes in 0 blocks\n==3837==   total heap usage: 15 allocs, 15 frees, 6,339 bytes allocated\n==3837== \n==3837== All heap blocks were freed -- no leaks are possible\n==3837== \n==3837== For counts of detected and suppressed errors, rerun with: -v\n==3837== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</code></pre></div>\n<p>Cool, no more memory leaks and we're saved.\nHave a great day!</p>","excerpt":"If you are someone writing Rust wrappers for C libraries, then you might as well wanna verify that you are doing the right cleanups in yourâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/learn-rust-2017","title":"Helping new Rustacians in 2017","tags":["open source","mozilla","rust"]},"fileAbsolutePath":"/home/rahul/opensource/creativcoder.dev/src/posts/learn-rust-2017.md"},"previous":{"frontmatter":{"path":"/rust-community-bangalore","title":"Meet rustox! Rust community at Bangalore","tags":["community","rustox","rust","meetup","2017"]},"fileAbsolutePath":"/home/rahul/opensource/creativcoder.dev/src/posts/rust-community-bangalore.md"}}}}