{"componentChunkName":"component---src-templates-page-js","path":"/setup-tailwind-nextjs","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How to setup NextJS with TailwindCSS","date":"06 December 2020","path":"/setup-tailwind-nextjs","author":null,"excerpt":"Quick guide for getting up and running with NextJS and TailwindCSS","tags":["tailwindcss","react","nextjs","stylesheets","frontend"],"coverImage":null},"id":"b66814b5-c524-52f4-8943-b283528db5b0","html":"<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/wkne1amv5nhxnp1553ps.png\" alt=\"Cover\"></p>\n<p>Lately, I've been experimenting with a few frontend technologies and have been doing a survey for the best out of the box stack and I think NextJS and TailwindCSS provides the least resistance path in quickly prototyping frontend projects. As a backend engineer who does not want to dabble too much with setting up a website or a project along with hundreds of webpack plugins and manual configurations, I think NextJS with TailwindCSS provides a great rapid prototyping experience.</p>\n<p>So I thought of putting together an article as a note to self about setting up TailwindCSS with NextJS. Hopefully this will be helpful to you if you are starting a project with the same stack.</p>\n<p>First, a bit of intro to these. </p>\n<p>NextJS is a framework built on top of react with all the three lettered jazz (SSR and friends). The website explains it better than I do: <a href=\"https://nextjs.org/\">https://nextjs.org/</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=3u_vIdnJYLc&#x26;t=10s\">TailwindCSS</a> on the other hand is the next best thing to happen to CSS ecosystem after Bootstrap (in my opinion). It let's one prototype and experiment with UIs quickly without having to switch back and forth between your HTML and CSS files because in TailwindCSS, what you get is lego like blocks of CSS classes which you can mix and mash to create beautiful layouts. Later, when these classes get too big, you can extract the them into their own styled components using the <code class=\"language-text\">@apply</code> directive. It's like writing a bunch of lines of code and then extracting them out as functions. Quite amazing! As someone who does mostly backend, this is certainly an efficient way to prototype and get feedback on UI design. It reduces the context switch by a lot!</p>\n<p>With that introduction out of the way, let's dive right in!</p>\n<p>First, we'll create a NextJS app by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-next-app next-tailwind</code></pre></div>\n<p><code class=\"language-text\">npx</code> allows you to run binary packages from npm directly without installing them locally. Then, we'll cd into the folder and add the <code class=\"language-text\">tailwindcss</code> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd next-tailwind\nyarn add tailwindcss</code></pre></div>\n<p>Once that's added, we move in our <code class=\"language-text\">styles</code> folder and we'll create a <code class=\"language-text\">globals.css</code> file (might already be there for you):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch styles/globals.css</code></pre></div>\n<p>To this file, we'll add the following tailwind directives and remove any existing styles if any:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@tailwind base;\n@tailwind components;\n@tailwind utilities;</code></pre></div>\n<p>The doc explains what they do: <a href=\"https://tailwindcss.com/docs/functions-and-directives\">https://tailwindcss.com/docs/functions-and-directives</a>\nWe'll also add a tailwind configuration file as you might need to customize the built-in style components classes it provides (injected via the above directives). So we'll run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx tailwindcss init</code></pre></div>\n<p>This creates a <code class=\"language-text\">tailwind.config.js</code> file at the root with basic fixtures for all customizable options:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// tailwind.config.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  purge<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  darkMode<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'media' or 'class'</span>\n  theme<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extend<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  variants<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extend<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One can also pass <code class=\"language-text\">--full</code> to populate the full list of configurable fields.</p>\n<p>The final step is to add a postcss configuration file as we'll need to convert the contents of <code class=\"language-text\">globals.css</code> and any tailwind classes we write in on our page to plain CSS for our browser to understand. We'll create a configuration file for postcss at root:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch postcss.config.js</code></pre></div>\n<p>where we'll add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// postcss.config.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tplugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">'tailwindcss'</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We specify the plugin we want to use which is <code class=\"language-text\">tailwindcss</code>. With that, our setup is complete. Let's take it up for spin: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn dev</code></pre></div>\n<p>To try tailwind, let's clear everything in <code class=\"language-text\">index.js</code> and paste the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-yellow-300 flex h-screen justify-center items-center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bg-white p-5 shadow-lg duration-200 hover:bg-yellow-200 transform hover:-skew-x-12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Hello tailwind next\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's a classic centered <code class=\"language-text\">div</code> example we've just created using a bunch of tailwind classes sprinkled in between.</p>\n<p>Our parent div is a flex wrapper <code class=\"language-text\">&quot;flex&quot;</code> with a yellow background <code class=\"language-text\">&quot;bg-yellow-300&quot;</code> with screen height <code class=\"language-text\">&quot;h-screen&quot;</code> where items on main-axis (horizontal) are aligned as <code class=\"language-text\">&quot;justify-center&quot;</code> and items on cross-axis (vertical) are <code class=\"language-text\">&quot;items-center&quot;</code>.</p>\n<p>The button within, has a white background <code class=\"language-text\">&quot;bg-white&quot;</code> with a shadow <code class=\"language-text\">&quot;shadow-lg&quot;</code> and a padding <code class=\"language-text\">&quot;p-5&quot;</code>. We also put some styles on the hover state: <code class=\"language-text\">&quot;hover:bg-yellow-200 transform hover:-skew-x-12 duration-200&quot;</code>. Here we are just saying: on hover make the background yellow and skew it clockwise (-12deg) and transition with 200ms.</p>\n<p>Let's head over to our browser to see it in effect:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/itr5o87lsxkugfi7zo3y.jpg\" alt=\"Tailwind demo\"></p>\n<p>Neat! </p>\n<p>As you can see, we did all of this without ever touching any CSS file. Also, these class names are quite intuitive and having worked multiple times with tailwind, I now rarely need to look them up during rapid prototyping, which cuts another chunk of time spent looking at the docs.</p>\n<p>It was with tailwind that I was able to quickly create a very simple landing page for <a href=\"https://creativcoder.dev/avrow\">avrow</a>.</p>\n<p>As an added note: <a href=\"https://play.tailwindcss.com/\">Tailwind playground</a> is an online tailwind playground that you can use to rapidly prototype UIs.</p>\n<p>And that's how you setup tailwind with NextJS. Until next time.</p>\n<p>Source code for this post is available at: github.com/creativcoder/next-tailwind</p>\n<p>Cheers!</p>","excerpt":"Cover Lately, I've been experimenting with a few frontend technologies and have been doing a survey for the best out of the box stack and I…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/rust-on-arduino-uno","title":"How to run Rust on Arduino Uno - Our first blink 💡","tags":["rust","arduino","uno","embedded","blink"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/rust-on-arduino-uno.md"},"previous":null}}}