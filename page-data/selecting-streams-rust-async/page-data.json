{"componentChunkName":"component---src-templates-page-js","path":"/selecting-streams-rust-async","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Selecting multiple streams in async Rust","date":"16 October 2020","path":"/selecting-streams-rust-async","author":null,"excerpt":"A interesting problem that involves taming Rust streams on-demand","tags":["rust","async","stream","future","select"],"coverImage":null},"id":"605ed693-71d9-53f4-b41e-6c8f957c2ff4","html":"<p><img src=\"https://images.unsplash.com/photo-1500332988905-1bf2a5733f63?ixlib=rb-1.2.1&#x26;q=80&#x26;fm=jpg&#x26;crop=entropy&#x26;cs=tinysrgb&#x26;dl=vanessa-ochotorena-iZ4yhyDB-dQ-unsplash.jpg&#x26;w=1920\" alt=\"stream\"></p>\n<p>This post is not a comprehensive guide to streams in Rust, but rather explores a solution\nto a problem I was facing in one of my side projects (coming soon :)). We'll arrive at our solution step by step\nstarting from scratch and hopefully you might find this post helpful if you ever run into\na similar situation. Having said that, I also totally feel that this can be done in a more concise and optimal way\nand I would love to have your views/feedback on this!</p>\n<blockquote>\n<p>Target audience: You have just started to delve into futures and streams in async Rust ecosystem and you know about tokio. This assumes that you also know the jargons that are used around the ecosystem such as tasks, executor etc.\nIf not read please start here and then continue here.</p>\n</blockquote>\n<h2>The problem</h2>\n<ul>\n<li>Part 1: We have a task (let's call it <code class=\"language-text\">Manager</code>) that spawns a bunch of worker threads (let's call them <code class=\"language-text\">Worker</code>), each having a given chunk of work to perform. The <code class=\"language-text\">Manager</code> manages these workers and in-turn is managed by the main/user thread. </li>\n<li>Part 2: Now given the setup, we should also be able to pause the workers on-demand and resume them back.\nHow would we go about solving this in async Rust?</li>\n</ul>\n<h3>First part of the problem</h3>\n<p>The first part is kinda easy and I whipped up a solution that looks something like this:</p>\n<p>Let's create a new cargo project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cargo new stream-select</code></pre></div>\n<p>We'll be using a bunch of crates. Here's the updated <code class=\"language-text\">Cargo.toml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"stream-select\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"creativcoder\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">edition</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"2018\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">tokio</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span><span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.3.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span><span class=\"token punctuation\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"full\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token key property\">async-channel</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.5.1\"</span>\n<span class=\"token key property\">futures</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.3.6\"</span>\n<span class=\"token key property\">rand</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.7.3\"</span></code></pre></div>\n<p>We use:</p>\n<p>tokio: for async operations.\nasync-channel: async version of mpmc (multi producer multi consumer) channels.\nfutures: provides additional extension methods apart from the one in standard library.\nrand: to generate random values of time intervals for simulation.</p>\n<p>Next, we'll change our <code class=\"language-text\">main</code> method to make it async:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// main.rs</span>\n\n<span class=\"token attribute attr-name\">#[tokio::main]</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For simplicity, we keep all error types as a <code class=\"language-text\">()</code>.</p>\n<p>Now, we talked about the Manager, so let's create a <code class=\"language-text\">Manager</code> struct. So Let's add a module named <code class=\"language-text\">manager.rs</code> with the following contents;</p>\n<p>Now we should also be able to pause the worker tasks</p>\n<p> that spawns Given a set of workers, I want</p>","excerpt":"stream This post is not a comprehensive guide to streams in Rust, but rather explores a solution\nto a problem I was facing in one of my sideâ€¦"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":"/rust-on-arduino-uno","title":"How to run Rust on Arduino Uno - Our first blink ðŸ’¡","tags":["rust","arduino","uno","embedded","blink"]},"fileAbsolutePath":"/home/creativcoder/opensource/creativcoder.dev/src/posts/rust-on-arduino-uno.md"},"previous":null}}}