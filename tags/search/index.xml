<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Search on creativcoder&#39;s blog</title>
    <link>https://creativcoder.github.io/tags/search/</link>
    <description>Recent content in Search on creativcoder&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Sat, 13 May 2017 23:25:02 +0530</lastBuildDate>
    
	<atom:link href="https://creativcoder.github.io/tags/search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building minimax AI step by step</title>
      <link>https://creativcoder.github.io/post/minimax_intuition/</link>
      <pubDate>Sat, 13 May 2017 23:25:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/minimax_intuition/</guid>
      <description>This post is another attempt to explain the minimax algorithm that can be used to simulate an AI for a simple game of tic tac toe and other similar games like chess, checkers etc. There are many other good posts on this topic so this post just complements them with a concise implementation step by step. We&amp;rsquo;ll just implement the simplest form of minimax to help beginners get started. There maybe a follow up post where we enhance our AI to not perform redundant state evaluation by pruning the game tree using alpha beta parameters.</description>
    </item>
    
  </channel>
</rss>