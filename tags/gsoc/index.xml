<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gsoc on creativcoder&#39;s blog</title>
    <link>https://creativcoder.github.io/tags/gsoc/</link>
    <description>Recent content in Gsoc on creativcoder&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Wed, 29 Jun 2016 23:25:02 +0530</lastBuildDate>
    
	<atom:link href="https://creativcoder.github.io/tags/gsoc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Service Worker Support Lands in Servo</title>
      <link>https://creativcoder.github.io/post/service_workers_servo/</link>
      <pubDate>Wed, 29 Jun 2016 23:25:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/service_workers_servo/</guid>
      <description>The last few weeks were exciting. With helpful guidance from Josh and awesome people at Servo I finally have a rudimentary implementation of Service Workers (hereby mentioned as SW) in Servo capable enough to monitor network requests made from different origins and optionally send back custom responses on a registered origin with basic lifecyle events (statechange, activate, install) supported.
Currently, Service Workers are gated behind a dom.serviceworker.enabled flag. To make them available in the DOM, Servo needs to be launched with</description>
    </item>
    
    <item>
      <title>Post community bonding period with Servo- GSoC&#39;16</title>
      <link>https://creativcoder.github.io/post/community_bonding_gsoc_servo/</link>
      <pubDate>Thu, 09 Jun 2016 23:35:16 -0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/community_bonding_gsoc_servo/</guid>
      <description>My previous post gave a brief introduction about service workers. This post will be a brief intro to Servo&amp;rsquo;s architectural design in order to provide a context for my next post which will discuss about the initial support for Service Workers that needed to be implemented.
Servo Browser Engine, is a project started by the motivation for exploiting parellelism at every level of rendering and layout and to leverage the growing no of CPU cores we have available today; which current existing browsers are not easily able to exploit because it would require a re-thought on their large legacy codebase.</description>
    </item>
    
    <item>
      <title>Introduction to the Service Workers</title>
      <link>https://creativcoder.github.io/post/service_workers_web/</link>
      <pubDate>Fri, 20 May 2016 15:28:15 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/service_workers_web/</guid>
      <description>This post discusses about a web platform specification, that aims to provide a programmatic control over web pages, by providing a user driven api, which can be used for many purposes like; to cache data for offline usage, control outgoing network requests, provide a platform for implementing push notifcations, and for making a progressive web app. Currently, I am working with Mozilla Research, on implementing the foundations for the service worker specification in Servo Browser engine as part of my Gsoc project (mentored by Josh).</description>
    </item>
    
    <item>
      <title>So it begins with Servo: GSOC&#39;16</title>
      <link>https://creativcoder.github.io/post/gsoc16_begins/</link>
      <pubDate>Sat, 23 Apr 2016 01:47:35 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/gsoc16_begins/</guid>
      <description>So far learning rust has been really rewarding and i found it really interesting in the domain of system&amp;rsquo;s programming; given that we don&amp;rsquo;t have much choices apart from C/C++ for something close to metal. I have started a couple of personal projects of mine in Rust, meltdown and silica. I hope to polish them as i learn more.
Also, I really wanted to start contributing to some open source projects related to Rust, and among them I found one called Servo, a project that is building on modern practices of safe systems programming.</description>
    </item>
    
  </channel>
</rss>