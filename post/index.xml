<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on creativcoder&#39;s blog</title>
    <link>https://creativcoder.github.io/post/</link>
    <description>Recent content in Posts on creativcoder&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Sat, 20 Jan 2018 12:52:02 +0530</lastBuildDate>
    
	<atom:link href="https://creativcoder.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making Rust more awesome in 2018 - My wishlist</title>
      <link>https://creativcoder.github.io/post/rust-2018/</link>
      <pubDate>Sat, 20 Jan 2018 12:52:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/rust-2018/</guid>
      <description>Credits for the animated ferris/header image goes to http://www.rustacean.net/.
ðŸ‘‡ is how i feel using rust in 2018 ! ðŸ˜‚ Cool; So finally got time to write this !
Rustaceans may already be familiar with Read Rust 2018. It&amp;rsquo;s really awesome to see all blog posts by other people. I&amp;rsquo;m yet to finish reading all of them :P
Adding to the chain of wishlist and suggestions for Rust&amp;rsquo;s roadmap for 2018, here&amp;rsquo;s my Wishlist:</description>
    </item>
    
    <item>
      <title>Meet rustox ! Rust community at Bangalore</title>
      <link>https://creativcoder.github.io/post/rust_community_bangalore/</link>
      <pubDate>Thu, 01 Jun 2017 23:25:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/rust_community_bangalore/</guid>
      <description>So another rust-lang community got added to the Users group. This time in Bangalore. Its a great opportunity for people interested in learning more about the language and also for rustaceans like us to spread awareness about the benefits of adopting rust to their toolbelt as a systems language.
So at the meetup we started; celebrating 1.0 (May 15) stable release of Rust by cutting the cake. Then we got delivered an awesome pitch by Saifi introducing what rust has to offer, what improvements it brings over other languages, what redundancies it resolves and why one should invest time in learning it.</description>
    </item>
    
    <item>
      <title>Valgrind with Rust - Checking memory leaks in your ffi library</title>
      <link>https://creativcoder.github.io/post/checking_memory_leaks_in_rust_ffi/</link>
      <pubDate>Mon, 13 Mar 2017 23:25:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/checking_memory_leaks_in_rust_ffi/</guid>
      <description>If you are someone writing Rust wrappers for C libraries, then you might as well wanna verify that you are doing the right cleanups in your destructors or you might ignorantly create potential memory leaks from usage of your library. In this post we&amp;rsquo;ll see how to use the very same tool you use in your c programs, i.e., Valgrind to check for memory leaks in your rust wrapper library.</description>
    </item>
    
    <item>
      <title>Helping new Rustacians in 2017</title>
      <link>https://creativcoder.github.io/post/rust_in_2017/</link>
      <pubDate>Tue, 17 Jan 2017 01:34:50 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/rust_in_2017/</guid>
      <description>Its almost been a year and a half with Rust and it has been a productive learning experience. Coming as a newbie programmer it made me a lot more insightful and aware of what the knowledge of systems programming really entails and the nuances of it, thanks to the amazing documentation, blogs and community altogether. Maintaining a good community around a language is a hard thing and Rust sets a very good example.</description>
    </item>
    
    <item>
      <title>Dynamic programming primer</title>
      <link>https://creativcoder.github.io/post/dynamic_programming_primer/</link>
      <pubDate>Tue, 03 Jan 2017 18:34:50 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/dynamic_programming_primer/</guid>
      <description>Dynamic programming while being widely applicable to a lot of computer science problems is often talked about being complicated to understand and so this post tries to uncover the very basic ideas behind them. This article is aimed at beginner levels so experienced readers may not find it useful though i would love suggestions and improvements from experienced people.
I&amp;rsquo;ll try to introduce readers who are new to DP technique of problem solving starting with a very trivial example.</description>
    </item>
    
    <item>
      <title>Basic Service Worker Support Lands in Servo</title>
      <link>https://creativcoder.github.io/post/service_workers_servo/</link>
      <pubDate>Wed, 29 Jun 2016 23:25:02 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/service_workers_servo/</guid>
      <description>The last few weeks were exciting. With helpful guidance from Josh and awesome people at Servo I finally have a rudimentary implementation of Service Workers (hereby mentioned as SW) in Servo capable enough to monitor network requests made from different origins and optionally send back custom responses on a registered origin with basic lifecyle events (statechange, activate, install) supported.
Currently, Service Workers are gated behind a dom.serviceworker.enabled flag. To make them available in the DOM, Servo needs to be launched with</description>
    </item>
    
    <item>
      <title>A short intro to type classes in Haskell</title>
      <link>https://creativcoder.github.io/post/typeclasses_haskell/</link>
      <pubDate>Sun, 19 Jun 2016 22:36:08 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/typeclasses_haskell/</guid>
      <description>Haskell as a language, always fascinates me with its unique typesystem and constructs that offer expressiveness, like no other languages.
Today I want to share something i learned called Type classes in haskell.
Let&amp;rsquo;s create a simple useless function in haskell, to discover what a typeclass is.
So here&amp;rsquo;s our magical function:
-- simple_haskell.hs magical x y = (x+y) * (x-y)  now, lets load it in ghci real quick,</description>
    </item>
    
    <item>
      <title>Post community bonding period with Servo- GSoC&#39;16</title>
      <link>https://creativcoder.github.io/post/community_bonding_gsoc_servo/</link>
      <pubDate>Thu, 09 Jun 2016 23:35:16 -0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/community_bonding_gsoc_servo/</guid>
      <description>My previous post gave a brief introduction about service workers. This post will be a brief intro to Servo&amp;rsquo;s architectural design in order to provide a context for my next post which will discuss about the initial support for Service Workers that needed to be implemented.
Servo Browser Engine, is a project started by the motivation for exploiting parellelism at every level of rendering and layout and to leverage the growing no of CPU cores we have available today; which current existing browsers are not easily able to exploit because it would require a re-thought on their large legacy codebase.</description>
    </item>
    
    <item>
      <title>Introduction to the Service Workers</title>
      <link>https://creativcoder.github.io/post/service_workers_web/</link>
      <pubDate>Fri, 20 May 2016 15:28:15 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/service_workers_web/</guid>
      <description>This post discusses about a web platform specification, that aims to provide a programmatic control over web pages, by providing a user driven api, which can be used for many purposes like; to cache data for offline usage, control outgoing network requests, provide a platform for implementing push notifcations, and for making a progressive web app. Currently, I am working with Mozilla Research, on implementing the foundations for the service worker specification in Servo Browser engine as part of my Gsoc project (mentored by Josh).</description>
    </item>
    
    <item>
      <title>So it begins with Servo: GSOC&#39;16</title>
      <link>https://creativcoder.github.io/post/gsoc16_begins/</link>
      <pubDate>Sat, 23 Apr 2016 01:47:35 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/gsoc16_begins/</guid>
      <description>So far learning rust has been really rewarding and i found it really interesting in the domain of system&amp;rsquo;s programming; given that we don&amp;rsquo;t have much choices apart from C/C++ for something close to metal. I have started a couple of personal projects of mine in Rust, meltdown and silica. I hope to polish them as i learn more.
Also, I really wanted to start contributing to some open source projects related to Rust, and among them I found one called Servo, a project that is building on modern practices of safe systems programming.</description>
    </item>
    
    <item>
      <title>Using Trait objects in Rust</title>
      <link>https://creativcoder.github.io/post/trait_objects_rust/</link>
      <pubDate>Sun, 21 Feb 2016 12:20:17 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/trait_objects_rust/</guid>
      <description>This, post aims to give, a very gentle introduction to traits objects in rust aimed at people who already are familiar with Traits in Rust. If you don&amp;rsquo;t know about traits well, a good read is here. A trait is the specification of an interface. That interface can contain functions (both member, and non-member), types and constants. In rust world, they are pretty much everything underlying the constructs we use like operators, functions, loops, and also can serve as identities for marking entities as being thread safe (the Send and Sync).</description>
    </item>
    
    <item>
      <title>Understanding the HTTP Protocol in simple terms (part 1: The HTTP request)</title>
      <link>https://creativcoder.github.io/post/understanding_http_part_one/</link>
      <pubDate>Tue, 16 Feb 2016 16:32:34 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/understanding_http_part_one/</guid>
      <description>This post, will discuss, about the abstraction that, the &amp;lsquo;user facing&amp;rsquo; internet stands on. I have seen many of my peers ask from time to time, what is http, and how it works. Also as a web developer understanding HTTP protocol is an essential asset to be able to think in a way, as to how to architecture your web apps, so that it follows the semantics of HTTP.
I intend to make things less vague, from what i have learned.</description>
    </item>
    
    <item>
      <title>Creating a Hugo blog on Github pages workflow</title>
      <link>https://creativcoder.github.io/post/setup_hugo_blog/</link>
      <pubDate>Tue, 15 Sep 2015 21:29:42 +0530</pubDate>
      
      <guid>https://creativcoder.github.io/post/setup_hugo_blog/</guid>
      <description>So, I migrated my blog to hugo; and after reading a few posts on setting up a new blog with Hugo,I found many of them were really not elaborate enough for newcomers to hugo, and so this post. Hugo is a really lean and fast static site generator written in Go. Now, ill give a high-level overview of how our blog will be setup. Inside our blog repo their will be two branches, once source, which will store only our posts in markdown and other configs and the other branch will be master, which will contain all files generated in the public folder by hugo.</description>
    </item>
    
  </channel>
</rss>